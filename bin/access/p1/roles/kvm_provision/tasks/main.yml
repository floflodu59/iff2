---
# tasks file for kvm_provision
- name: Ensure requirements in place
  package:
   name:
    - guestfs-tools
    - python3-libvirt
   state: present
  become: yes

- name: Get VMs list
  community.libvirt.virt:
   command: list_vms
  register: existing_vms
  changed_when: no

- name: Create VM if not exists
  block:

  - name: Download base image
    get_url:
     url: "{{ base_image_url }}"
     dest: "/tmp/{{ base_image_name }}"
#     checksum: "sha256:{{ base_image_sha }}"

  - name: Copy base image to libvirt directory
    copy:
     dest: "{{ libvirt_pool_dir }}/{{ vm_name }}.qcow2"
     src: "/tmp/{{ base_image_name }}"
     force: no
     remote_src: yes
     mode: 0660
    register: copy_results

  - name: Resize image
    command: qemu-img resize {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2 +{{ vm_size }}

#  - name: Create OS Disk
#    command: qemu-img create -f qcow2 {{ libvirt_pool_dir }}/{{ vm_name }}-temp.qcow2 64G

#  - name: Expand image
#    command: virt-resize --expand /dev/vda1 {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2 {{ libvirt_pool_dir }}/{{ vm_name }}-temp.qcow2

#  - name: Clear temp image
#    command: rm {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2

#  - name: Replace image
#    command: cp {{ libvirt_pool_dir }}/{{ vm_name }}-temp.qcow2 {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2

  - name: Configure the image
    command: |
     virt-customize -a {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2 \
     --hostname {{ vm_name }} \
     --root-password password:{{ vm_root_pass }} \
     --ssh-inject 'root:file:{{ ssh_key }}' \
     --firstboot /srv/iff/bin/access/p1/setupnetwork.sh \
     --network \
     --uninstall cloud-init --selinux-relabel
    when: copy_results is changed

  - name: Define vm
    community.libvirt.virt:
     command: define
     xml: "{{ lookup('template', 'vm-template.xml.j2') }}"

  when: "vm_name not in existing_vms.list_vms"

- name: Ensure VM is started
  community.libvirt.virt:
   name: "{{ vm_name }}"
   state: running
  register: vm_start_results
  until: "vm_start_results is success"
  retries: 15
  delay: 2

#- name: Ensure temporary file is deleted
#  file:
#   path: "/tmp/{{ base_image_name }}"
#   state: absent
#  when: cleanup_tmp | bool
